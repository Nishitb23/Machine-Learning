# -*- coding: utf-8 -*-
"""zero hidden layer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmCRQDOzQodr5C6YnQNQhCLvvNEO5IEC
"""

!pip install tensorflow==1.4.0 

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import matplotlib.pyplot as plt
import numpy as np

#input
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)
n_train = mnist.train.num_examples
n_validation = mnist.validation.num_examples
n_test = mnist.test.num_examples

# defining the nueral network
n_input = 784
n_output = 10
learning_rate = 3e-4
batch = 128
dropout = 0.5
iterations = 1500
X = tf.placeholder("float", [None, n_input]) 
Y = tf.placeholder("float", [None, n_output])

# Initializing weights and biases
weights = {
    'out': tf.Variable(tf.truncated_normal([n_input, n_output], stddev=0.1)),
}
biases = {
    'out': tf.Variable(tf.constant(0.1, shape=[n_output]))
}

output_layer = tf.matmul(X, weights['out']) + biases['out']

# cross entropy loss function
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=Y, logits=output_layer))
train_step = tf.train.AdamOptimizer(1e-3).minimize(cross_entropy)

#prediction
prediction = tf.equal(tf.argmax(output_layer, 1), tf.argmax(Y, 1)) 
accuracy = tf.reduce_mean(tf.cast(prediction, tf.float32))

# Initializing the session
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)

loss_results = []
accuracy_results = []
check = 1e-8
pre_loss = 0

for i in range(iterations):
    batch_x, batch_y = mnist.train.next_batch(batch)
    sess.run(train_step, feed_dict={
        X: batch_x, Y: batch_y
        })
    
    val_loss, val_accuracy = sess.run([cross_entropy, accuracy],feed_dict={X: mnist.validation.images, Y: mnist.validation.labels})
    if abs(pre_loss - val_loss) < check:
       break

    if i % 100 == 0:
        batch_loss,batch_accuracy = sess.run([cross_entropy, accuracy],feed_dict={X: batch_x, Y: batch_y})
        print("Iteration",str(i),"\t| Loss =",str(batch_loss),"\t| Accuracy =",str(batch_accuracy))
        loss_results.append(batch_loss)
        accuracy_results.append(batch_accuracy)

# Testing
test_accuracy = sess.run(accuracy, feed_dict={X: mnist.test.images, Y: mnist.test.labels})
print("\nAccuracy on test set:", test_accuracy)

# Plotting the results

fig, axes = plt.subplots(2, sharex=True, figsize=(12, 8))
fig.suptitle('Training results')

axes[0].set_ylabel("Loss", fontsize=14)
axes[0].plot(loss_results)

axes[1].set_ylabel("Accuracy", fontsize=14)
axes[1].set_xlabel("Epoch", fontsize=14)
axes[1].plot(accuracy_results)
plt.show()